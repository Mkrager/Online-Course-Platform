@using OnlineCoursePlatform.App.ViewModels.Test
@model TestViewModel

@{
    var message = TempData["Message"] as string;
}

<div class="test-form">
    <h2>Update Test</h2>

    <h1 class="error-text">@message</h1>

    <div class="form-group">
        <label asp-for="Title"></label>
        <span asp-validation-for="Title" class="error-text"></span>
        <input asp-for="Title" />
    </div>

    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="LessonId" />

    <div id="questions">
        @for (int i = 0; i < Model.Questions.Count; i++)
        {
            <div class="question" data-index="@i">
                <div class="question-header">
                    <input type="text" name="Questions[@i].Text" value="@Model.Questions[i].Text" placeholder="Question Text" />
                    <span onclick="toggleQuestion(@i)"><ion-icon name="caret-down-outline"></ion-icon></span>
                </div>
                <div class="answers">
                    @for (int j = 0; j < Model.Questions[i].Answers.Count; j++)
                    {
                        <div class="answer">
                            <input type="checkbox" name="Questions[@i].Answers[@j].IsCorrect" value="true" @(Model.Questions[i].Answers[j].IsCorrect ? "checked" : "") />
                            <input type="text" name="Questions[@i].Answers[@j].Text" value="@Model.Questions[i].Answers[j].Text" placeholder="Answer Option" />
                        </div>
                    }
                    <button type="button" class="btn" onclick="addAnswer(@i, this)">+ Add Answer</button>
                    <button type="button" class="btn btn-danger" onclick="removeQuestion(this)">Delete Question</button>
                </div>
            </div>
        }
    </div>

    <button type="button" class="btn" onclick="addQuestion()">+ Add Question</button>

    <button type="button" class="btn" onclick="updateTest()">Save Changes</button>
</div>

@section Scripts {
    <script>
        let questionCount = @Model.Questions.Count;

        function addQuestion() {
            const index = questionCount++;
            const questionBlock = document.createElement('div');
            questionBlock.classList.add('question');
            questionBlock.setAttribute('data-index', index);

            questionBlock.innerHTML = `
                <div class="question-header">
                    <input type="text" name="Questions[${index}].Text" placeholder="Question Text" />
                    <span onclick="toggleQuestion(${index})"><ion-icon name="caret-down-outline"></ion-icon></span>
                </div>
                <div class="answers">
                    <div class="answer">
                        <input type="checkbox" name="Questions[${index}].Answers[0].IsCorrect" value="true" />
                        <input type="text" name="Questions[${index}].Answers[0].Text" placeholder="Answer Option" />
                    </div>
                    <button type="button" class="btn" onclick="addAnswer(${index}, this)">+ Add Answer</button>
                    <button type="button" class="btn btn-danger" onclick="removeQuestion(this)">Delete Question</button>
                </div>
            `;

            document.getElementById('questions').appendChild(questionBlock);
        }

        function addAnswer(questionIndex, btn) {
            const answersDiv = btn.closest('.answers');
            const index = answersDiv.querySelectorAll('.answer').length;
            const answerDiv = document.createElement('div');
            answerDiv.classList.add('answer');

            answerDiv.innerHTML = `
                <input type="checkbox" name="Questions[${questionIndex}].Answers[${index}].IsCorrect" value="true" />
                <input type="text" name="Questions[${questionIndex}].Answers[${index}].Text" placeholder="Answer Option" />
            `;

            answersDiv.insertBefore(answerDiv, btn);
        }

        function toggleQuestion(index) {
            const block = document.querySelector(`[data-index="${index}"]`);
            block.classList.toggle('collapsed');

            const icon = block.querySelector('.question-header ion-icon');
            const isCollapsed = block.classList.contains('collapsed');

            icon.setAttribute('name', isCollapsed ? 'caret-back-outline' : 'caret-down-outline');
        }

        function removeQuestion(button) {
            const block = button.closest('.question');
            block.remove();
            reindex();
        }

        // Функція для оновлення індексів у name та data-index після змін
        function reindex() {
            const questionBlocks = document.querySelectorAll('.question');
            questionBlocks.forEach((qBlock, qIndex) => {
                qBlock.setAttribute('data-index', qIndex);
                const questionTextInput = qBlock.querySelector('.question-header input[type="text"]');
                questionTextInput.name = `Questions[${qIndex}].Text`;

                const answerBlocks = qBlock.querySelectorAll('.answer');
                answerBlocks.forEach((aBlock, aIndex) => {
                    const checkbox = aBlock.querySelector('input[type="checkbox"]');
                    const textInput = aBlock.querySelector('input[type="text"]');
                    checkbox.name = `Questions[${qIndex}].Answers[${aIndex}].IsCorrect`;
                    textInput.name = `Questions[${qIndex}].Answers[${aIndex}].Text`;
                });
            });

            // Оновлюємо лічильник загальної кількості питань
            questionCount = questionBlocks.length;
        }

        function getFormData() {
            const title = document.querySelector('input[name="Title"]')?.value || "";
            const id = document.querySelector('input[name="Id"]')?.value || "";
            const lessonId = document.querySelector('input[name="LessonId"]')?.value || "";

            const questions = [];

            const questionBlocks = document.querySelectorAll(".question");

            questionBlocks.forEach(block => {
                const questionTextInput = block.querySelector('.question-header input[type="text"]');
                const questionText = questionTextInput ? questionTextInput.value : "";

                const answers = [];

                const answerBlocks = block.querySelectorAll(".answer");
                answerBlocks.forEach(answerBlock => {
                    const isCorrectInput = answerBlock.querySelector('input[type="checkbox"]');
                    const textInput = answerBlock.querySelector('input[type="text"]');
                    const isCorrect = isCorrectInput ? isCorrectInput.checked : false;
                    const text = textInput ? textInput.value : "";

                    answers.push({ Text: text, IsCorrect: isCorrect });
                });

                questions.push({ Text: questionText, Answers: answers });
            });

            const formData = {
                Id: id,
                LessonId: lessonId,
                Title: title,
                Questions: questions
            };

            console.log('FormData to send:', JSON.stringify(formData, null, 2)); // Для дебагу

            return formData;
        }

        function updateTest() {
            const formData = getFormData();

            $.ajax({
                url: '@Url.Action("Update", "Test")',
                type: 'PUT',
                data: JSON.stringify(formData),
                contentType: 'application/json',
                success: function (response) {
                    if (response.redirectToUrl) {
                        window.location.href = response.redirectToUrl;
                    } else {
                        $('.error-text').text('');

                        for (var key in response.errors) {
                            var errorMessage = response.errors[key];
                            $('#' + key).next('.error-text').text(errorMessage);
                        }
                    }
                },
                error: function (xhr) {
                    console.log(xhr.responseText);
                }
            });
        }
    </script>
}
